name: Build and Deploy Qt Application

on:
  push:
    branches:
      - main  # Exécute le workflow sur les pushes vers la branche "main".

jobs:
  build:
    runs-on: windows-latest

    steps:
    # 1. Checkout du code source
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Installer Qt via aqt
    - name: Install Qt 6.7.3
      run: |
        pip install aqt
        aqt install qt 6.7.3 --platform win64-msvc2022

    # 3. Installer MSBuild
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    # 4. Nettoyage du dossier Release uniquement
    - name: Clean Previous Release Build
      run: |
        if (Test-Path "x64\Release") {
          Remove-Item -Recurse -Force "x64\Release"
        }

    # 5. Configuration de Visual Studio 2022 avec vcvars64.bat
    - name: Setup Visual Studio 2022
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"

    # 6. Compilation du projet en mode Release
    - name: Build Project (Release)
      run: |
        msbuild PlanningPoker.sln /p:Configuration=Release /p:Platform=x64

    # 7. Exécuter windeployqt avec le bon chemin
    - name: Deploy Application
      run: |
        C:\Qt\6.7.3\msvc2022_64\bin\windeployqt.exe x64\Release\PlanningPoker.exe

    # 8. Créer un fichier ZIP avec les fichiers nécessaires
    - name: Create ZIP Archive
      run: |
        mkdir release
        copy x64\Release\PlanningPoker.exe release\
        copy x64\Release\*.dll release\
        tar -a -c -f release\PlanningPoker-v${{ github.run_number }}.zip release\*

    # 9. Créer une release GitHub avec le fichier ZIP
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release\PlanningPoker-v${{ github.run_number }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}